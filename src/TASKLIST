CONSTITIUTION

Stability, and then functions; Rarely seen situations thridly; Performance is the last.

Add a table of machines							DONE
	- (id, name)
Add a table of access points						DONE
	- (protocol, port, auth, root)					SWITCH
	- using (url, comment for simple)				DONE
Add GUI to manipulate them
	- TreeItem infrastructure					DONE
	- MachineItem							DONE
	- APItem							DONE
	- MachineModel							DONE
	- Set Model to View
Add implementation in macmgr						DONE

=C&T=									DONE

Bug fix:
	- Progress skipped to 60% immedately for an old volume, 	FIXED
		as the old journals are deleted.
	- Crash if remove while loading journals.			FIXED

Improve machinemodelitems.cc for load and save.				CANCEL
Rewrite volumemodel.cc							CANCEL

=C&T=									DONE

Use Linux As Our Primary Platform
	- whoami							DONE
	- daemon							DONE
	- EXPORT_TO_DLL							DONE
	- strut ioinfo_t						DONE
	- ipc								DONE
	- xtdio								DONE
	- libop								PP
	- native_event
		+ eventfd
	- unistr
		+ std::wstring > std::string
	- volume
		+ findmnt

Reform CMakeLists.txt

=Compile infra=

Serial (how? syntax?)
	- Database
		- meta
		- volume
		- dentry
		- fentry
		- tag
		- attribute
		- relation
	- Wire (IPC)


Revolution of file system management
	- split into ray and tracer
	- "ray" for scan the whole volume and find files
	- "tracer" for record the changes
	- Use case: 
		* volumemodel launch a call to 
		  index_engine_t::queue_volume
		* index_engine_t check the schedule,
			- if other VOL on the same disk are WIP, pending
			+ if no VOL in the same disk are WIP, launch one
		* a ray object is created, with a tracer
		* ray is a tasklet
		* tracer is a pollable fd
		* ray would not start before the tracer launched
		* ray would scan files and add/update to Database
		* after scanned the volume, tracer would acknowledge changes
		  to Database

SO, THE TASKS ARE:

Write the ray infra. 							DONE
Write the tracer infra.  						PEND
Migrate watching_t to tracer						PEND
Write the ray for NTFS							PEND

-WIP-

Infra reincarnation
	- split into multiple components, each one is a standalone 
	  processes
	- event driven
	- ``kernel'' becomes the ``infra'' library, containing
		+ thread management
		+ epoll/IOCP abstraction
		+ event infrastructure
		+ convient facilities to create new components
	- ``pal'' is kept but provides various abstractions across plat.s
	- The database are maintained by ``nexus''
		+ ``dal'' is a part of ``nexus'' after that
		+ ``ray'' and ``tracer'' are still part of the nexus
			* overhead considerations
			* security issue
	- We needs ``proto'' lib to handling various problems
		+ UTF-16 and UTF-8 support at the same time
			* No one has made this because they perfer one
			  speficied codec
		+ Blob support
		+ fd transmission support
			* dbus made this but it is too complex and
			  not suitable for windows
		+ (potential) sharing memory support

Nexus:
	- Start components
	- Start named pipes to listen

-STE-
Rework on search engine

-MTE-
Volume Change
	- feedback_port devfp
	- eventd devd
	- RegisterDeviceNotification
	- an assistant window, or hack the application.
Volume ReCheck Mechanism

=C&T=

Hashing file
	+ maybe duplication check

Portable last_insert_id

=C&T=

Bug fix: Search Engine
	- I've forgotten what's this...
NOT Trigger UAC, using Daemon
	- IPC for handle
USN Journal Version Check.
String Improvement
	- eliminate unnecessary string copy
	- unistrref
	- using the forth argument in 
	sqlite3_bind_text16

-LTE-
Lazy children generation of TreeItem
MT tasklet queue and fdpool
	- Hazard in OOE of RMV+ADD ?!
	- cpu_number
Future Optimization
    - Stack Event for each query and eliminate the dump
blob and hash
	- filemgr_t::blobchange
symlink support
