DAL：Database Abstraction Layer，本意是封装所有与数据库实现相关的
	细节，但是时运不济（哈？），从各种角度来看DAL都要负责领域层对象
	的创建，否则会增加设计的复杂度。
	于是，DAL在负责抽象数据库交互之外还负责提供以下领域层对象的实现
	（格式：[领域对象]：[类名]）
		tag: Tag
		tag类型：TagFamily
		属性类型：AttrFamily
		属性：Attr
		容器：Container
		资源：Resource
# 都是Abstract Class，DAL另外还要提供抽象工厂
# 关乎实现：容器和资源在DB中可以放于同一张表中（便于存储，以及FK的实现）
# 但是从DAL中获取的的对象必须区分清楚两点！因为其他层是要靠这两者的区别来区别执行程序的！

shell：字符界面程序，为Remus核心系统提供简单的接口
	语法请参考 Remus_shell_specification.txt

GAL：GUI Abstraction Layer，图形用户接口抽象层，用于为界面提供与WidgetKit无关的接口
	初步目标是Windows平台下封装Platform SDK，Linux平台下封装Qt――当然这都是后话了。

core：核心代码，目前已经确定的任务如下
	*	提供针对平台优化的Unicode字符串类UniStr，在接口与STL保持近似（兼容太难了）的前提下提供
		QString的一些十分方便的函数。
		必要时可以转调QString，以简化早期实现

GUI：Graphic User Interface，最终目标是一个基于GAL的GUI，不过现在可以暂时不管，先拿Qt那一套搭一个再说
	ps:	此任务已压后完成

