[Architecture]
* 每个tnode以index唯一确定；
* tnode的实际意义是唯一确定一个概念，tag只是这些概念的一个（或多个）名字而已；
* tnode的唯一性由用户保证，计算机系统尚没有确认概念唯一性的智能。
* tnode需要的字段：
	* comment TEXT
		- 对这个概念的注释，例如iPad: 石头都有多点触摸，它却没有
	* refc
		- 对tnode的引用计数，只计算tag的，
		- 减到0后删除

[Table]
* tnode(idx TEXT AUTOINCREMENT, comment TEXT)
	PRIMARY KEY (idx)

// 原先设计中的tnode字段多数被转移到了Relations中

[Relations]
* tagtag(tagger, taggee)
	PRIMARY KEY (tagger, taggee)
	tagger REFERENCES tnode(idx)
	taggee REFERENCES tnode(idx)
	tagger ON DELETE CASCADE
	taggee ON DELETE CASCADE

* tagfile(tagger, file)
	PRIMARY KEY (tagger, file)
	tagger REFERENCES tnode(idx)
	file REFERENCES file(idx)
	tagger ON DElETE CASCADE

[Create]
* Use case
	1. 获取请求
	2. 创建tnode
	3. 返回tnode的idx
* Technologies
	1. AUTOINCREMENT supported by database
* Core SQL
	1. INSERT INTO tnode VALUES('', 1);

[Delete]

[Add Comment]
* Use case
	1. 用户定位tag
	2. 用户修改comment
		- 此用例可能触发tnode的[Create]用例
* Technologies
	1. 尝试获得tnode时就要做好tnode的lazy initialization工作
* Core SQL
	1. UPDATE tnode SET comment = <comment> WHERE idx = <sel>;
* Implementation
